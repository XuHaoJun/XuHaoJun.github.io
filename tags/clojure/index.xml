<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clojure on xublog</title>
    <link>http://xuhaojun.github.io/tags/clojure/</link>
    <description>Recent content in Clojure on xublog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 May 2014 19:10:27 +0800</lastBuildDate>
    <atom:link href="http://xuhaojun.github.io/tags/clojure/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>黑白棋 (Clojurescript)</title>
      <link>http://xuhaojun.github.io/2014/05/11/reversi-game-clojurescript/</link>
      <pubDate>Sun, 11 May 2014 19:10:27 +0800</pubDate>
      
      <guid>http://xuhaojun.github.io/2014/05/11/reversi-game-clojurescript/</guid>
      <description>

&lt;p&gt;一個簡單的單機網頁(html5)黑白棋遊戲。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://xuhaojun.github.io/reversi/&#34;&gt;Try it Online&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/XuHaoJun/reversi&#34;&gt;Source code&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;實現算法-a-id-sec-1-name-sec-1-a:62581f113666cc3902cd87e363146d86&#34;&gt;實現算法&lt;a id=&#34;sec-1&#34; name=&#34;sec-1&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;每次下棋對其八個鄰近方格做掃描，如果是相反顏色的棋子，就往其方位向前找到另一個相同顏色的棋子，若有找到則翻棋，沒有則遍歷下一個方位。&lt;/p&gt;

&lt;h1 id=&#34;電腦-ai-下棋算法-a-id-sec-2-name-sec-2-a:62581f113666cc3902cd87e363146d86&#34;&gt;電腦(AI)下棋算法&lt;a id=&#34;sec-2&#34; name=&#34;sec-2&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;暫時隨機，在看用哪種好。&lt;/p&gt;

&lt;h1 id=&#34;clojurescript-使用心得-a-id-sec-3-name-sec-3-a:62581f113666cc3902cd87e363146d86&#34;&gt;Clojurescript 使用心得&lt;a id=&#34;sec-3&#34; name=&#34;sec-3&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;一堆括號阿！！每次都要讓函數回傳有意義的值，Debug
起來也很容易，一個函數影響的範圍就只有他的參數而已，沒有隱示參數(全域變數、成員變數)的話就很好測試，每個函數就盡量小小的做一件事，不過到使用
&lt;a href=&#34;https://github.com/photonstorm/phaser&#34;&gt;phaser&lt;/a&gt; (javascript html5 game
framework)那層就一堆副作用囉!(set! xxx yyy)。&lt;/p&gt;

&lt;h1 id=&#34;截圖-a-id-sec-4-name-sec-4-a:62581f113666cc3902cd87e363146d86&#34;&gt;截圖&lt;a id=&#34;sec-4&#34; name=&#34;sec-4&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;http://xuhaojun.github.io/img/reversi-game.png&#34; alt=&#34;img&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Clojure 遞迴測試</title>
      <link>http://xuhaojun.github.io/2014/05/10/clojure-recursion/</link>
      <pubDate>Sat, 10 May 2014 19:43:37 +0800</pubDate>
      
      <guid>http://xuhaojun.github.io/2014/05/10/clojure-recursion/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://clojure.org/functional_programming#Functional%2520Programming--Recursive%2520Looping&#34;&gt;Clojure Recursive
Looping&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;傳統遞迴-a-id-sec-1-name-sec-1-a:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;傳統遞迴&lt;a id=&#34;sec-1&#34; name=&#34;sec-1&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;source-a-id-sec-1-1-name-sec-1-1-a:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;Source&lt;a id=&#34;sec-1-1&#34; name=&#34;sec-1-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;(defn deepable-recur? [deep-length]
  (if (= 0 deep-length)
    true
    (deepable-recur? (dec deep-length))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;test-a-id-sec-1-2-name-sec-1-2-a:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;Test&lt;a id=&#34;sec-1-2&#34; name=&#34;sec-1-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;一個很蠢的測試函式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn deep-test [start end step deep-fn]
  (doseq [length (range start end step)]
    (if (deep-fn length) (println length &amp;quot;Deep Done!&amp;quot;))))

(deep-test 5000 10000 1000 deepable-recur?)
;;; output-&amp;gt;
;; 5000 Deep Done!
;; 6000 Deep Done!
;; 7000 Deep Done!
;; 8000 Deep Done!
;; StackOverflowError 
;; clojure.lang.Numbers$LongOps.combine (Numbers.java:394)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;clojure-recur-special-operator-a-id-sec-2-name-sec-2-a:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;Clojure recur special operator&lt;a id=&#34;sec-2&#34; name=&#34;sec-2&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;source-a-id-sec-2-1-name-sec-2-1-a:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;Source&lt;a id=&#34;sec-2-1&#34; name=&#34;sec-2-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;(defn deepable-recur? [deep-length]
  (loop [len deep-length]
    (if (= 0 len)
      true
      (recur (dec len)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;test-a-id-sec-2-2-name-sec-2-2-a:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;Test&lt;a id=&#34;sec-2-2&#34; name=&#34;sec-2-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;(deep-test 60000000 80000000 2000000 deepable-recur?)
;;; output-&amp;gt;
;; 60000000 Deep Done!
;; 62000000 Deep Done!
;; 64000000 Deep Done!
;; 66000000 Deep Done!
;; 68000000 Deep Done!
;; 70000000 Deep Done!
;; 72000000 Deep Done!
;; 74000000 Deep Done!
;; 76000000 Deep Done!
;; 78000000 Deep Done!
;; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;clojure-trampoline-a-id-sec-3-name-sec-3-a:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;Clojure trampoline&lt;a id=&#34;sec-3&#34; name=&#34;sec-3&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;source-a-id-sec-3-1-name-sec-3-1-a:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;Source&lt;a id=&#34;sec-3-1&#34; name=&#34;sec-3-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;(defn deepable-recur? [deep-length]
  (if (= 0 deep-length)
    true
    #(deepable-recur? (dec deep-length))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;test-a-id-sec-3-2-name-sec-3-2-a:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;Test&lt;a id=&#34;sec-3-2&#34; name=&#34;sec-3-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;比上面那個慢多了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(trampoline deepable-recur? 70000000)
;;; output-&amp;gt;
;; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://clojure.org/functional_programming#Functional%2520Programming--Recursive%2520Looping&#34;&gt;Clojure Recursive
Looping&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;傳統遞迴-a-id-sec-1-name-sec-1-a-1:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;傳統遞迴&lt;a id=&#34;sec-1&#34; name=&#34;sec-1&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;source-a-id-sec-1-1-name-sec-1-1-a-1:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;Source&lt;a id=&#34;sec-1-1&#34; name=&#34;sec-1-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;(defn deepable-recur? [deep-length]
  (if (= 0 deep-length)
    true
    (deepable-recur? (dec deep-length))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;test-a-id-sec-1-2-name-sec-1-2-a-1:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;Test&lt;a id=&#34;sec-1-2&#34; name=&#34;sec-1-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一個很蠢的測試函式：&lt;/p&gt;

&lt;p&gt;(defn deep-test &lt;a href=&#34;doseq [length (range start end step&#34;&gt;start end step deep-fn&lt;/a&gt;]
    (if (deep-fn length)
      (println length &amp;ldquo;Deep Done!&amp;rdquo;))))
(deep-test 5000 10000 1000 deepable-recur?)
;;; output-&amp;gt;
;; 5000 Deep Done!
;; 6000 Deep Done!
;; 7000 Deep Done!
;; 8000 Deep Done!
;; StackOverflowError   clojure.lang.Numbers$LongOps.combine
(Numbers.java:394)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;clojure-recur-special-operator-a-id-sec-2-name-sec-2-a-1:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;Clojure recur special operator&lt;a id=&#34;sec-2&#34; name=&#34;sec-2&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;source-a-id-sec-2-1-name-sec-2-1-a-1:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;Source&lt;a id=&#34;sec-2-1&#34; name=&#34;sec-2-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;(defn deepable-recur? [deep-length]
  (loop [len deep-length]
    (if (= 0 len)
      true
      (recur (dec len)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;test-a-id-sec-2-2-name-sec-2-2-a-1:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;Test&lt;a id=&#34;sec-2-2&#34; name=&#34;sec-2-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;(deep-test 60000000 80000000 2000000 deepable-recur?)
;;; output-&amp;gt;
;; 60000000 Deep Done!
;; 62000000 Deep Done!
;; 64000000 Deep Done!
;; 66000000 Deep Done!
;; 68000000 Deep Done!
;; 70000000 Deep Done!
;; 72000000 Deep Done!
;; 74000000 Deep Done!
;; 76000000 Deep Done!
;; 78000000 Deep Done!
;; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;clojure-trampoline-a-id-sec-3-name-sec-3-a-1:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;Clojure trampoline&lt;a id=&#34;sec-3&#34; name=&#34;sec-3&#34;&gt;&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&#34;source-a-id-sec-3-1-name-sec-3-1-a-1:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;Source&lt;a id=&#34;sec-3-1&#34; name=&#34;sec-3-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;(defn deepable-recur? [deep-length]
  (if (= 0 deep-length)
    true
    #(deepable-recur? (dec deep-length))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;test-a-id-sec-3-2-name-sec-3-2-a-1:35d8892b97503d2142a01e8e3b6e846d&#34;&gt;Test&lt;a id=&#34;sec-3-2&#34; name=&#34;sec-3-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;比上面那個慢多了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(trampoline deepable-recur? 70000000)
;;; output-&amp;gt;
;; true
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>